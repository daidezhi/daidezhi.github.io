{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"My Journey in CFD","text":""},{"location":"tutorials/openfoam/hpc_build/ls6.html","title":"TACC Lonestar6","text":""},{"location":"tutorials/openfoam/hpc_build/ls6.html#1-about","title":"1. About","text":""},{"location":"tutorials/openfoam/hpc_build/ls6.html#11-compute-nodes","title":"1.1 Compute Nodes","text":"<p>Lonestar6 is an HPC cluster operated by the Texas Advanced Computing Center (TACC). It comprises 560 compute nodes, each delivering up to 5 TFlops of peak performance and equipped with 256 GB of DRAM. The specifications of the compute node are listed below (the table is from Lonestar6 User Guide).</p> Specification Value CPU 2x AMD EPYC 7763 64-Core Processor (\"Milan\") Total cores per node <code>128</code> cores on two sockets (64 cores/socket) Hardware threads per core 1 per core Hardware threads per node 128 x 1 = <code>128</code> Clock rate 2.45 GHz (Boost up to 3.5 GHz) RAM 256 GB (3200 MT/s) DDR4 Local storage 288 GB /tmp partition on a 288 GB SSD"},{"location":"tutorials/openfoam/hpc_build/ls6.html#12-citizenship","title":"1.2 Citizenship","text":"<p><code>Lonestar6</code> and also any other HPC systems are shared by all of the users. Therefore what you do on the systems does affect others. Exercise <code>good citizenship</code> to ensure that your activity does not adversely impact the system and other users. Any of the following operations but not limited to will lead <code>warnings/access privileges revocations/project terminations/criminal prosecutions</code>:</p> <p>Prohibited Operations</p> <ul> <li>Mining cryptocurrency and/or use block-chain technology for personal gain</li> <li>Installing or using any protected software or data</li> <li>Sharing user credentials</li> <li>Infringing upon someone else's copyright</li> <li>Circumventing login procedures to gain access where you are not allowed</li> <li>Scanning or probing any information deliberately without prior authorization</li> <li>Any usage for commercial purposes or personal gain</li> <li>Modifying file access for the purpose of circumventing purge policies</li> <li>Running jobs on the login nodes</li> <li>Stressing the file systems</li> </ul> The last two operations are common reasons for a ticket. I have received a ticket in 2019 regarding file system stress. <p>Ticket No. 50733</p> <p>Recent job(s) and filesystem related issues</p> <ul> <li><code>TACC</code> Hello, Over this past weekend the $WORK filesystem was under heavy stress. This was affected system wide. The system admins traced some of the issues back to jobs you submitted. While there were other factors involved some of your jobs raised some concerns. Can you please provide a brief summary of what you are attempting to run and how IO is being handled? A full directory path to your job script and log/error files would be helpful. Any additional information is helpful as well. Best,</li> <li><code>ME</code> Dear ###, I am sorry for this issue. Our job submitted to the system is a parallel CFD simulation case with OpenFOAM flow solver (10 nodes, 240 mpi threads allocated, will write data to disk every 10 minutes approximately). I noticed the heavy stress in the file system around 2:00 am this morning, because the simulation became very very slow (never happened before), the solver is always waiting for data writing. At that time, I just thought that might be the system issues. Because we did many parallel simulation before, and everything was OK. This morning, I killed the job (ID 2005083). The log/error files for this job can be found in '###.out' and '###.err'. The slurm job script is '###'. We are always following the usage policy of TACC. If you found the reason, please tell us in details since we can work this out together. Also please do let me know if you have any other questions. Sincerely, Dezhi Dai</li> <li><code>ME</code> What's more, in this case, since the mesh will be decomposed to 240 sub ones, the solver will write simulation results to the 240 sub folders at the same time. Hope this info helps for identifying.</li> <li><code>ME</code> Dear ###, I might found the reason. Our flow solver is based on OpenFOAM and no change to the IO modules. Here is the info about IO for parallel jobs in OpenFOAM (from 'https://openfoam.com/releases/openfoam-v1712/parallel.php'): <code>OpenFOAM\u2019s input and output (I/O) system has received an update that provides users with the choice of how to read and write OpenFOAM data files. All I/O is now redirected through an object called fileHandler. This file handler can be selected through a standard run-time selection model. This release ships with three file handlers which differ in how they handle parallel operation: uncollated : This is the normal behaviour where in parallel every processor writes its own processorXXX directory. masterUncollated : Special version of uncollated that performs all I/O on the master, and therefore does not require NFS (but is slower). collated : This writes all processors into a single file. This drastically reduce the number of files generated for parallel runs. For each output time a single field file is assembled, as opposed to all fields being written per processor, e.g. Looking at the $FOAM_CASE directory, instead of seeing directories processor0 \u2026 processorN, a single processors directory is written.</code> The 'uncollated' scheme has been used in Job 2005083. Please do let me know if you have some new findings. Thanks, Dezhi Dai</li> <li><code>TACC</code> Dezhi, Thank you for providing all the information. What had occurred over the weekend was that a number of users across the different systems were all utilizing the /work filesystem. For the most part, the jobs on their own wouldn't cause quite the damage. However, with all these jobs running and utilizing /work there was many requests being made to the Meta Data Servers which caused a slowdown. Again, while not detrimental on their own all these different jobs together created the \"perfect storm\" which resulted in the filesystem to go down. However, your last comment about the uncollated scheme leads me to also think that added additional work on the filesystem that may not have been seen with another method. We advise users to not run out of /work but to utilize /scratch (https://portal.tacc.utexas.edu/user-guides/stampede2#overview-filesystems). I understand this is a link to the stampede2 user guide but the same information applies. If you are on a system that doesn't have a /scratch filesystem, such as maverick2, then if possible use /tmp. Essentially, use /scratch when possible as it avoids added stress to /work which is mounted across all tacc systems and prone to more users on it. Here are some additional tips about use of the filesystems: https://portal.tacc.utexas.edu/user-guides/stampede2#using-citizenship-filesystems Best,</li> </ul> <p>Login Node Usages</p> <ul> <li>The login nodes are for</li> <li>Editing and managing files</li> <li>Compiling code (small scale)</li> <li>Submitting and tracking jobs</li> <li>Do NOT</li> <li>Run jobs</li> <li>Perform intensive computational activities, even for post-processing</li> </ul>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#13-file-systems","title":"1.3 File Systems","text":"<p>The most common used directories are <code>$HOME</code>, <code>$WORK</code> and <code>$SCRATCH</code>. The <code>$HOME</code> and <code>$WORK</code> are for storage and keeping track of important items. Actual job activity, reading and writing to disk, should be offloaded to your resource's <code>$SCRATCH</code> file system.</p> <p>Tip</p> <p>To check the absolute paths of the <code>$HOME</code>, <code>$WORK</code> and <code>$SCRATCH</code>, run the following commands in the terminal</p> <pre><code>echo $HOME\necho $WORK\necho $SCRATCH\n</code></pre> File System Quota Best Storage Practices Best Activities <code>$HOME</code> <code>10 GB</code>/<code>200,000 files</code> cron jobssmall scriptsenvironment settings compilingediting <code>$WORK</code> <code>1 TB</code>/<code>3,000,000 files</code> store software installationsoriginal datasets that can't be reproducedjob scripts and templates staging datasets <code>$SCRATCH</code> <code>no quota</code> Temporary StorageI/O filesjob filestemporary datasets all job I/O activitysee TACC's Scratch File System Purge Policy. <p>TACC's Scratch File System Purge Policy</p> <p>The <code>$SCRATCH</code> file system, as its name indicates, is a temporary storage space. Files that have not been accessed in ten days are subject to purge. Deliberately modifying file access time (using any method, tool, or program) for the purpose of circumventing purge policies is prohibited.</p> <p>The operating system updates a file's access time when that file is modified on a login or compute node. Reading or executing a file/script on a login node does not update the access time, but reading or executing on a compute node does update the access time. This approach helps us distinguish between routine management tasks (e.g. <code>tar</code>, <code>scp</code>) and production use. Use the command <code>ls -ul</code> to view access times.</p>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#2-prepare-for-build","title":"2. Prepare for Build","text":"<p>Why using <code>$WORK</code> instead of <code>$HOME</code>?</p> <p>Due to disk space and file count limitations in the <code>$HOME</code> directory, this guide uses the <code>$WORK</code> directory for building OpenFOAM. The <code>$WORK</code> directory offers higher quotas for both storage and the number of files, making it more suitable for large software builds.</p>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#21-download-openfoam-v2312","title":"2.1 Download <code>OpenFOAM-v2312</code>","text":"<p>The OpenFOAM packages are available at <code>https://dl.openfoam.com</code>. For <code>OpenFOAM-v2312</code>:</p> <pre><code>cd $WORK\n\n[ -d OpenFOAM ] || mkdir OpenFOAM\ncd OpenFOAM\n\n[ -f OpenFOAM-v2312.tgz ] || wget https://dl.openfoam.com/source/v2312/OpenFOAM-v2312.tgz\n[ -d OpenFOAM-v2312 ] || tar -xzf OpenFOAM-v2312.tgz\n\n[ -f ThirdParty-v2312.tgz ] || wget https://dl.openfoam.com/source/v2312/ThirdParty-v2312.tgz\n[ -d ThirdParty-v2312 ] || tar -xzf ThirdParty-v2312.tgz\n</code></pre>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#22-update-workopenfoamopenfoam-v2312etcbashrc","title":"2.2 Update <code>$WORK/OpenFOAM/OpenFOAM-v2312/etc/bashrc</code>","text":"<p>Modify the default installation path in <code>$WORK/OpenFOAM/OpenFOAM-v2312/etc/bashrc</code> by changing the base directory from <code>$HOME</code> to <code>$WORK</code>. This ensures that all user-specific OpenFOAM files are stored under the <code>$WORK</code> directory.</p> Line No. From To <code>125</code> <code>projectDir=\"$HOME/OpenFOAM/OpenFOAM-$WM_PROJECT_VERSION\"</code> <code>projectDir=\"$WORK/OpenFOAM/OpenFOAM-$WM_PROJECT_VERSION\"</code> <code>175</code> <code>$HOME/$WM_PROJECT/${USER:-user} $FOAM_USER_APPBIN $FOAM_USER_LIBBIN \\</code> <code>$WORK/$WM_PROJECT/${USER:-user} $FOAM_USER_APPBIN $FOAM_USER_LIBBIN \\</code> <code>183</code> <code>export WM_PROJECT_USER_DIR=\"$HOME/$WM_PROJECT/${USER:-user}-$WM_PROJECT_VERSION\"</code> <code>export WM_PROJECT_USER_DIR=\"$WORK/$WM_PROJECT/${USER:-user}-$WM_PROJECT_VERSION\"</code>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#23-update-relevant-configuration-files","title":"2.3 Update Relevant Configuration Files","text":"<p>The system uses the following compilers, libraries, and tools:</p> <code>ICC 24.1</code> with <code>IMPI 21.12</code> <code>GCC 11.2.0</code> with <code>MVAPICH2 2.3.7</code> Program Command to Load Note <code>ICC 24.1</code> <code>module load intel/24.1</code> <code>ICC</code>, Intel\u00ae C++ Compiler Classic. Loading it will also automatically load <code>GCC 13.2.0</code>. <code>IMPI 21.12</code> <code>module load impi/21.12</code> <code>IMPI</code>, Intel\u00ae MPI Library <code>SCOTCH 7.0.7</code> <code>module load scotch/7.0.7-i32</code> <code>SCOTCH</code> is a set of programs and libraries which implement the static mapping and sparse matrix reordering algorithms developed within the SCOTCH project. <code>METIS 5.2.1.1</code> <code>module load metis/5.2.1.1</code> <code>METIS</code> is a set of serial programs for partitioning graphs, partitioning finite element meshes, and producing fill reducing orderings for sparse matrices. <code>CMake 3.24.2</code> <code>module load cmake/3.24.2</code> <code>CMake</code> is a free, cross-platform, software development tool for building applications via compiler-independent instructions. <p>Update the following configuration files to match the system's compiler and library settings:</p> File Line No. From To <code>$WM_PROJECT_DIR/etc/bashrc</code> <code>71</code> <code>export WM_COMPILER=Gcc</code> <code>export WM_COMPILER=Icx</code> <code>$WM_PROJECT_DIR/etc/bashrc</code> <code>99</code> <code>#export WM_COMPILE_CONTROL=\"+strict\"</code> <code>export WM_COMPILE_CONTROL=\"+openmp\"</code> <code>$WM_PROJECT_DIR/etc/bashrc</code> <code>106</code> <code>export WM_MPLIB=SYSTEMOPENMPI</code> <code>export WM_MPLIB=INTELMPI</code> <code>$WM_PROJECT_DIR/etc/config.sh/scotch</code> <code>38</code> <code>SCOTCH_VERSION=scotch_6.1.0</code> <code>SCOTCH_VERSION=scotch-system</code> <code>$WM_PROJECT_DIR/etc/config.sh/metis</code> <code>36</code> <code>METIS_VERSION=metis-5.1.0</code> <code>METIS_VERSION=metis-system</code> <p>Add the following lines to <code>$WM_PROJECT_DIR/etc/config.sh/settings</code> after <code>Line 220</code> (which is <code>case \"$WM_COMPILER_TYPE-$WM_COMPILER\" in</code>) </p> <pre><code>system-Icx)\n    gmpDir=\"$archDir/${gmp_version}\"\n    mpfrDir=\"$archDir/${mpfr_version}\"\n    mpcDir=\"$archDir/${mpc_version}\"\n    gslDir=\"$archDir/${gsl_version}\"    # used by waves2Foam\n    _foamAddLibAuto \"$gmpDir\" &amp;&amp; export GMP_ARCH_PATH=\"$gmpDir\"\n    _foamAddLibAuto \"$mpfrDir\" &amp;&amp; export MPFR_ARCH_PATH=\"$mpfrDir\"\n    _foamAddLibAuto \"$mpcDir\"\n    _foamAddLibAuto \"$gslDir\"\n    ;;\n</code></pre> <p>Append the following lines to <code>$WM_PROJECT_DIR/etc/bashrc</code>:</p> <pre><code># Load system compilers, libraries, and tools\nmodule load intel/24.1\nmodule load impi/21.12\nmodule load scotch/7.0.7-i32\nmodule load metis/5.2.1.1\nmodule load cmake/3.24.2\n\nexport LD_PRELOAD=\"/opt/intel/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib/release/libmpi.so${LD_PRELOAD:+:$LD_PRELOAD}\"\n</code></pre> Complete contents of the modified <code>$WM_PROJECT_DIR/etc/bashrc</code> file <pre><code>#----------------------------------*-sh-*--------------------------------------\n# =========                 |\n# \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox\n#  \\\\    /   O peration     |\n#   \\\\  /    A nd           | www.openfoam.com\n#    \\\\/     M anipulation  |\n#------------------------------------------------------------------------------\n#     Copyright (C) 2011-2016 OpenFOAM Foundation\n#     Copyright (C) 2016-2023 OpenCFD Ltd.\n#------------------------------------------------------------------------------\n# License\n#     This file is part of OpenFOAM, distributed under GPL-3.0-or-later.\n#\n# File\n#     etc/bashrc\n#\n# Description\n#     The OpenFOAM environment for POSIX shell (eg, bash,dash,zsh,...).\n#     Source manually or from the ~/.bashrc or ~/.profile files.\n#\n#     Most settings can be overridden with a &lt;prefs.sh&gt; file:\n#\n#       - Base values (eg, from system admin):\n#         -  $WM_PROJECT_DIR/etc/prefs.sh\n#\n#       - User or group values (first file found):\n#         -  ~/.OpenFOAM/$FOAM_API/prefs.sh\n#         -  ~/.OpenFOAM/prefs.sh\n#         -  $WM_PROJECT_SITE/$FOAM_API/etc/prefs.sh\n#         -  $WM_PROJECT_SITE/etc/prefs.sh\n#\n#     Some settings can also be overridden on the command-line when\n#     sourcing this file. For example,\n#\n#       . /path/etc/bashrc WM_COMPILER=Clang WM_LABEL_SIZE=64\n#\n# Environment\n#     FOAM_CONFIG_ETC\n#     - alternative/additional location for OpenFOAM etc/ directory\n#\n#     FOAM_CONFIG_MODE (search mode for etc config files - see foamEtcFile)\n#         - eg, FOAM_CONFIG_MODE=\"o\" to only use OpenFOAM config files\n#         - no influence on OpenFOAM applications, just the config files\n#\n#     FOAM_VERBOSE (set/unset)\n#         - add extra verbosity when sourcing files\n#\n#     WM_PROJECT_SITE (optional directory)\n#         - local site-specific directory, uses WM_PROJECT_DIR/site if unset\n#\n# Note\n#     Changes made to this file will be lost with the next upgrade.\n#\n#------------------------------------------------------------------------------\n\n# [WM_PROJECT_VERSION] - A human-readable version name\n# A development version is often named 'com' - as in www.openfoam.com\nexport WM_PROJECT_VERSION=v2312\n\n#------------------------------------------------------------------------------\n# Configuration environment variables.\n# Override with &lt;prefs.sh&gt; instead of editing here.\n\n# [WM_COMPILER_TYPE] - Compiler location:\n# = system | ThirdParty\nexport WM_COMPILER_TYPE=system\n\n# [WM_COMPILER] - Compiler:\n# = Gcc | Clang | Icc | Icx | Amd | Arm | Cray | Fujitsu | Nvidia |\n#   Gcc&lt;digits&gt; | Clang&lt;digits&gt;\nexport WM_COMPILER=Icx\n\n# [WM_PRECISION_OPTION] - Floating-point precision:\n# = DP | SP | SPDP\nexport WM_PRECISION_OPTION=DP\n\n# [WM_LABEL_SIZE] - Label size in bits:\n# = 32 | 64\nexport WM_LABEL_SIZE=32\n\n# [WM_COMPILE_OPTION] - Optimised(default), debug, profiling, other:\n# = Opt | Dbg | Debug | Prof\nexport WM_COMPILE_OPTION=Opt\n\n# [WM_COMPILE_CONTROL] - additional control for compilation/linking\n#   +gold   : use gold linker\n#   +link-ld: use   ld linker [clang]\n#   +lld    : use  lld linker [clang]\n#   +mold   : use mold linker [clang]\n#   ~libz   : without libz compression\n#   ~rpath  : without rpath handling [MacOS]\n#   +openmp : with openmp\n#   ~openmp : without openmp\n#   +ccache : use ccache\n#   +xcrun  : use xcrun and native compilers [MacOS]\n#   +strict : more deprecation warnings (may generate *many* warnings)\n#   ccache=... : ccache command (unquoted, single/double or &lt;&gt; quoted)\n#   version=... : compiler suffix (eg, version=11 -&gt; gcc-11)\nexport WM_COMPILE_CONTROL=\"+openmp\"\n\n# [WM_MPLIB] - MPI implementation:\n# = SYSTEMOPENMPI | OPENMPI | SYSTEMMPI | MPI | MPICH | MPICH-GM |\n#   HPMPI | CRAY-MPICH | FJMPI | QSMPI | SGIMPI | INTELMPI | USERMPI\n# Specify SYSTEMOPENMPI1, SYSTEMOPENMPI2 for internal tracking (if desired)\n# Can also use INTELMPI-xyz etc and define your own wmake rule\nexport WM_MPLIB=INTELMPI\n\n\n#------------------------------------------------------------------------------\n# (advanced / legacy)\n\n# [WM_PROJECT] - This project is \"OpenFOAM\" - do not change\nexport WM_PROJECT=OpenFOAM\n\n# [projectDir] - directory containing this OpenFOAM version.\n# \\- When this file is located as $WM_PROJECT_DIR/etc/bashrc, the next lines\n#    should work when sourced by BASH or ZSH shells. If this however fails,\n#    set one of the fallback values to an appropriate path.\n#\n#    This can be removed if an absolute path is provided for WM_PROJECT_DIR\n#    later on in this file\n# --\nprojectDir=\"${BASH_SOURCE:-${ZSH_NAME:+$0}}\";\n[ -n \"$projectDir\" ] &amp;&amp; projectDir=\"$(\\cd $(dirname $projectDir)/.. &amp;&amp; \\pwd -L)\" ||\\\nprojectDir=\"$WORK/OpenFOAM/OpenFOAM-$WM_PROJECT_VERSION\"\n# projectDir=\"/opt/openfoam/OpenFOAM-$WM_PROJECT_VERSION\"\n# projectDir=\"/usr/local/OpenFOAM/OpenFOAM-$WM_PROJECT_VERSION\"\n################################################################################\n# Or optionally hard-coded (eg, with autoconfig)\n# projectDir=\"@PROJECT_DIR@\"\n: # Safety statement (if the user removed all fallback values)\n\n# [FOAM_SIGFPE] - Trap floating-point exceptions.\n#               - overrides the 'trapFpe' controlDict entry\n# = true | false\n#export FOAM_SIGFPE=true\n\n# [FOAM_SETNAN] - Initialize memory with NaN\n#               - overrides the 'setNaN' controlDict entry\n# = true | false\n#export FOAM_SETNAN=false\n\n# [FOAM_ABORT] - Treat exit() on FatalError as abort()\n# = true | false\n#export FOAM_ABORT=false\n\n# [FOAM_CODE_TEMPLATES] - dynamicCode templates\n# - unset: uses 'foamEtcFile -list codeTemplates/dynamicCode'\n##export FOAM_CODE_TEMPLATES=\"$WM_PROJECT_DIR/etc/codeTemplates/dynamicCode\"\n\n# [FOAM_JOB_DIR] - location of jobControl\n#                - unset: equivalent to ~/.OpenFOAM/jobControl\n# export FOAM_JOB_DIR=\"$HOME/.OpenFOAM/jobControl\"\n\n# [WM_OSTYPE] - Operating System Type (set automatically)\n# = POSIX | MSwindows\n#export WM_OSTYPE=POSIX\n\n# [WM_ARCH_OPTION] - compiling with -m32 option on 64-bit system\n# = 32 | 64\n#   * on a 64-bit OS this can be 32 or 64\n#   * on a 32-bit OS this option is ignored (always 32-bit)\n#export WM_ARCH_OPTION=64\n\n# [FOAM_EXTRA_CFLAGS, FOAM_EXTRA_CXXFLAGS, FOAM_EXTRA_LDFLAGS]\n# Additional compilation flags - do not inherit from the environment.\n# Set after sourcing or via &lt;prefs.sh&gt; to avoid surprises.\nunset FOAM_EXTRA_CFLAGS FOAM_EXTRA_CXXFLAGS FOAM_EXTRA_LDFLAGS\n\n################################################################################\n# NO (NORMAL) USER EDITING BELOW HERE\n\n# Capture values of old directories to be cleaned from PATH, LD_LIBRARY_PATH\nfoamOldDirs=\"$WM_PROJECT_DIR $WM_THIRD_PARTY_DIR \\\n    $WORK/$WM_PROJECT/${USER:-user} $FOAM_USER_APPBIN $FOAM_USER_LIBBIN \\\n    $WM_PROJECT_SITE $FOAM_SITE_APPBIN $FOAM_SITE_LIBBIN \\\n    $FOAM_MODULE_APPBIN $FOAM_MODULE_LIBBIN\"\n\n# [WM_PROJECT_DIR] - Location of this OpenFOAM version\nexport WM_PROJECT_DIR=\"$projectDir\"\n\n# [WM_PROJECT_USER_DIR] - Location of user files\nexport WM_PROJECT_USER_DIR=\"$WORK/$WM_PROJECT/${USER:-user}-$WM_PROJECT_VERSION\"\n\n# [WM_PROJECT_SITE] - Location of site-specific (group) files\n# Default (unset) implies WM_PROJECT_DIR/site\n# Normally defined in calling environment\n\n\n# Finalize setup of OpenFOAM environment\nif [ -d \"$WM_PROJECT_DIR\" ]\nthen\n    if [ -n \"$FOAM_VERBOSE\" ] &amp;&amp; [ -n \"$PS1\" ]\n    then\n        echo \"source $WM_PROJECT_DIR/etc/config.sh/setup\" 1&gt;&amp;2\n    fi\n    . \"$WM_PROJECT_DIR/etc/config.sh/setup\" \"$@\"\nelse\n    echo \"Error: did not locate installation path for $WM_PROJECT-$WM_PROJECT_VERSION\" 1&gt;&amp;2\n    echo \"No directory: $WM_PROJECT_DIR\" 1&gt;&amp;2\nfi\n\n# Cleanup variables (done as final statement for a clean exit code)\nunset foamOldDirs projectDir\n\n# Load system compilers, libraries, and tools\nmodule load intel/24.1\nmodule load impi/21.12\nmodule load scotch/7.0.7-i32\nmodule load metis/5.2.1.1\nmodule load cmake/3.24.2\n\nexport LD_PRELOAD=\"/opt/intel/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib/release/libmpi.so${LD_PRELOAD:+:$LD_PRELOAD}\"\n\n#------------------------------------------------------------------------------\n</code></pre> <p>This configuration compiles successfully, but the resulting applications encounter a <code>Segmentation fault (core dumped)</code> at runtime.</p> Program Command to Load Note <code>GCC 11.2.0</code> <code>module load gcc/11.2.0</code> <code>GCC</code>, the GNU Compiler Collection <code>MVAPICH2 2.3.7</code> <code>module load mvapich2/2.3.7</code> A BSD-licensed implementation of the MPI standard developed by Ohio State University. <code>SCOTCH 7.0.7</code> <code>module load scotch/7.0.7-i32</code> <code>SCOTCH</code> is a set of programs and libraries which implement the static mapping and sparse matrix reordering algorithms developed within the SCOTCH project. <code>METIS 5.2.1.1</code> <code>module load metis/5.2.1.1</code> <code>METIS</code> is a set of serial programs for partitioning graphs, partitioning finite element meshes, and producing fill reducing orderings for sparse matrices. <code>CMake 3.24.2</code> <code>module load cmake/3.24.2</code> <code>CMake</code> is a free, cross-platform, software development tool for building applications via compiler-independent instructions. <p>Update the following configuration files to match the system's compiler and library settings:</p> File Line No. From To <code>$WM_PROJECT_DIR/etc/bashrc</code> <code>99</code> <code>#export WM_COMPILE_CONTROL=\"+strict\"</code> <code>export WM_COMPILE_CONTROL=\"+openmp\"</code> <code>$WM_PROJECT_DIR/etc/bashrc</code> <code>106</code> <code>export WM_MPLIB=SYSTEMOPENMPI</code> <code>export WM_MPLIB=mvapich2</code> <code>$WM_PROJECT_DIR/etc/config.sh/scotch</code> <code>38</code> <code>SCOTCH_VERSION=scotch_6.1.0</code> <code>SCOTCH_VERSION=scotch-system</code> <code>$WM_PROJECT_DIR/etc/config.sh/metis</code> <code>36</code> <code>METIS_VERSION=metis-5.1.0</code> <code>METIS_VERSION=metis-system</code> <code>$WM_PROJECT_DIR/wmake/rules/General/Gcc/c</code> <code>6</code> <code>cc         := gcc$(COMPILER_VERSION)</code> <code>cc         := mpicc</code> <code>$WM_PROJECT_DIR/wmake/rules/General/Gcc/c++</code> <code>9</code> <code>CC         := g++$(COMPILER_VERSION) -std=c++14</code> <code>CC         := mpic++ -std=c++14</code> <p>Append the following lines to <code>$WM_PROJECT_DIR/etc/bashrc</code>:</p> <pre><code># Load system compilers, libraries, and tools\nmodule load gcc/11.2.0\nmodule load mvapich2/2.3.7\nmodule load scotch/7.0.7-i32\nmodule load metis/5.2.1.1\nmodule load cmake/3.24.2\n</code></pre> Complete contents of the modified <code>$WM_PROJECT_DIR/etc/bashrc</code> file <pre><code>#----------------------------------*-sh-*--------------------------------------\n# =========                 |\n# \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox\n#  \\\\    /   O peration     |\n#   \\\\  /    A nd           | www.openfoam.com\n#    \\\\/     M anipulation  |\n#------------------------------------------------------------------------------\n#     Copyright (C) 2011-2016 OpenFOAM Foundation\n#     Copyright (C) 2016-2023 OpenCFD Ltd.\n#------------------------------------------------------------------------------\n# License\n#     This file is part of OpenFOAM, distributed under GPL-3.0-or-later.\n#\n# File\n#     etc/bashrc\n#\n# Description\n#     The OpenFOAM environment for POSIX shell (eg, bash,dash,zsh,...).\n#     Source manually or from the ~/.bashrc or ~/.profile files.\n#\n#     Most settings can be overridden with a &lt;prefs.sh&gt; file:\n#\n#       - Base values (eg, from system admin):\n#         -  $WM_PROJECT_DIR/etc/prefs.sh\n#\n#       - User or group values (first file found):\n#         -  ~/.OpenFOAM/$FOAM_API/prefs.sh\n#         -  ~/.OpenFOAM/prefs.sh\n#         -  $WM_PROJECT_SITE/$FOAM_API/etc/prefs.sh\n#         -  $WM_PROJECT_SITE/etc/prefs.sh\n#\n#     Some settings can also be overridden on the command-line when\n#     sourcing this file. For example,\n#\n#       . /path/etc/bashrc WM_COMPILER=Clang WM_LABEL_SIZE=64\n#\n# Environment\n#     FOAM_CONFIG_ETC\n#     - alternative/additional location for OpenFOAM etc/ directory\n#\n#     FOAM_CONFIG_MODE (search mode for etc config files - see foamEtcFile)\n#         - eg, FOAM_CONFIG_MODE=\"o\" to only use OpenFOAM config files\n#         - no influence on OpenFOAM applications, just the config files\n#\n#     FOAM_VERBOSE (set/unset)\n#         - add extra verbosity when sourcing files\n#\n#     WM_PROJECT_SITE (optional directory)\n#         - local site-specific directory, uses WM_PROJECT_DIR/site if unset\n#\n# Note\n#     Changes made to this file will be lost with the next upgrade.\n#\n#------------------------------------------------------------------------------\n\n# [WM_PROJECT_VERSION] - A human-readable version name\n# A development version is often named 'com' - as in www.openfoam.com\nexport WM_PROJECT_VERSION=v2312\n\n#------------------------------------------------------------------------------\n# Configuration environment variables.\n# Override with &lt;prefs.sh&gt; instead of editing here.\n\n# [WM_COMPILER_TYPE] - Compiler location:\n# = system | ThirdParty\nexport WM_COMPILER_TYPE=system\n\n# [WM_COMPILER] - Compiler:\n# = Gcc | Clang | Icc | Icx | Amd | Arm | Cray | Fujitsu | Nvidia |\n#   Gcc&lt;digits&gt; | Clang&lt;digits&gt;\nexport WM_COMPILER=Icx\n\n# [WM_PRECISION_OPTION] - Floating-point precision:\n# = DP | SP | SPDP\nexport WM_PRECISION_OPTION=DP\n\n# [WM_LABEL_SIZE] - Label size in bits:\n# = 32 | 64\nexport WM_LABEL_SIZE=32\n\n# [WM_COMPILE_OPTION] - Optimised(default), debug, profiling, other:\n# = Opt | Dbg | Debug | Prof\nexport WM_COMPILE_OPTION=Opt\n\n# [WM_COMPILE_CONTROL] - additional control for compilation/linking\n#   +gold   : use gold linker\n#   +link-ld: use   ld linker [clang]\n#   +lld    : use  lld linker [clang]\n#   +mold   : use mold linker [clang]\n#   ~libz   : without libz compression\n#   ~rpath  : without rpath handling [MacOS]\n#   +openmp : with openmp\n#   ~openmp : without openmp\n#   +ccache : use ccache\n#   +xcrun  : use xcrun and native compilers [MacOS]\n#   +strict : more deprecation warnings (may generate *many* warnings)\n#   ccache=... : ccache command (unquoted, single/double or &lt;&gt; quoted)\n#   version=... : compiler suffix (eg, version=11 -&gt; gcc-11)\nexport WM_COMPILE_CONTROL=\"+openmp\"\n\n# [WM_MPLIB] - MPI implementation:\n# = SYSTEMOPENMPI | OPENMPI | SYSTEMMPI | MPI | MPICH | MPICH-GM |\n#   HPMPI | CRAY-MPICH | FJMPI | QSMPI | SGIMPI | INTELMPI | USERMPI\n# Specify SYSTEMOPENMPI1, SYSTEMOPENMPI2 for internal tracking (if desired)\n# Can also use INTELMPI-xyz etc and define your own wmake rule\nexport WM_MPLIB=INTELMPI\n\n\n#------------------------------------------------------------------------------\n# (advanced / legacy)\n\n# [WM_PROJECT] - This project is \"OpenFOAM\" - do not change\nexport WM_PROJECT=OpenFOAM\n\n# [projectDir] - directory containing this OpenFOAM version.\n# \\- When this file is located as $WM_PROJECT_DIR/etc/bashrc, the next lines\n#    should work when sourced by BASH or ZSH shells. If this however fails,\n#    set one of the fallback values to an appropriate path.\n#\n#    This can be removed if an absolute path is provided for WM_PROJECT_DIR\n#    later on in this file\n# --\nprojectDir=\"${BASH_SOURCE:-${ZSH_NAME:+$0}}\";\n[ -n \"$projectDir\" ] &amp;&amp; projectDir=\"$(\\cd $(dirname $projectDir)/.. &amp;&amp; \\pwd -L)\" ||\\\nprojectDir=\"$WORK/OpenFOAM/OpenFOAM-$WM_PROJECT_VERSION\"\n# projectDir=\"/opt/openfoam/OpenFOAM-$WM_PROJECT_VERSION\"\n# projectDir=\"/usr/local/OpenFOAM/OpenFOAM-$WM_PROJECT_VERSION\"\n################################################################################\n# Or optionally hard-coded (eg, with autoconfig)\n# projectDir=\"@PROJECT_DIR@\"\n: # Safety statement (if the user removed all fallback values)\n\n# [FOAM_SIGFPE] - Trap floating-point exceptions.\n#               - overrides the 'trapFpe' controlDict entry\n# = true | false\n#export FOAM_SIGFPE=true\n\n# [FOAM_SETNAN] - Initialize memory with NaN\n#               - overrides the 'setNaN' controlDict entry\n# = true | false\n#export FOAM_SETNAN=false\n\n# [FOAM_ABORT] - Treat exit() on FatalError as abort()\n# = true | false\n#export FOAM_ABORT=false\n\n# [FOAM_CODE_TEMPLATES] - dynamicCode templates\n# - unset: uses 'foamEtcFile -list codeTemplates/dynamicCode'\n##export FOAM_CODE_TEMPLATES=\"$WM_PROJECT_DIR/etc/codeTemplates/dynamicCode\"\n\n# [FOAM_JOB_DIR] - location of jobControl\n#                - unset: equivalent to ~/.OpenFOAM/jobControl\n# export FOAM_JOB_DIR=\"$HOME/.OpenFOAM/jobControl\"\n\n# [WM_OSTYPE] - Operating System Type (set automatically)\n# = POSIX | MSwindows\n#export WM_OSTYPE=POSIX\n\n# [WM_ARCH_OPTION] - compiling with -m32 option on 64-bit system\n# = 32 | 64\n#   * on a 64-bit OS this can be 32 or 64\n#   * on a 32-bit OS this option is ignored (always 32-bit)\n#export WM_ARCH_OPTION=64\n\n# [FOAM_EXTRA_CFLAGS, FOAM_EXTRA_CXXFLAGS, FOAM_EXTRA_LDFLAGS]\n# Additional compilation flags - do not inherit from the environment.\n# Set after sourcing or via &lt;prefs.sh&gt; to avoid surprises.\nunset FOAM_EXTRA_CFLAGS FOAM_EXTRA_CXXFLAGS FOAM_EXTRA_LDFLAGS\n\n################################################################################\n# NO (NORMAL) USER EDITING BELOW HERE\n\n# Capture values of old directories to be cleaned from PATH, LD_LIBRARY_PATH\nfoamOldDirs=\"$WM_PROJECT_DIR $WM_THIRD_PARTY_DIR \\\n    $WORK/$WM_PROJECT/${USER:-user} $FOAM_USER_APPBIN $FOAM_USER_LIBBIN \\\n    $WM_PROJECT_SITE $FOAM_SITE_APPBIN $FOAM_SITE_LIBBIN \\\n    $FOAM_MODULE_APPBIN $FOAM_MODULE_LIBBIN\"\n\n# [WM_PROJECT_DIR] - Location of this OpenFOAM version\nexport WM_PROJECT_DIR=\"$projectDir\"\n\n# [WM_PROJECT_USER_DIR] - Location of user files\nexport WM_PROJECT_USER_DIR=\"$WORK/$WM_PROJECT/${USER:-user}-$WM_PROJECT_VERSION\"\n\n# [WM_PROJECT_SITE] - Location of site-specific (group) files\n# Default (unset) implies WM_PROJECT_DIR/site\n# Normally defined in calling environment\n\n\n# Finalize setup of OpenFOAM environment\nif [ -d \"$WM_PROJECT_DIR\" ]\nthen\n    if [ -n \"$FOAM_VERBOSE\" ] &amp;&amp; [ -n \"$PS1\" ]\n    then\n        echo \"source $WM_PROJECT_DIR/etc/config.sh/setup\" 1&gt;&amp;2\n    fi\n    . \"$WM_PROJECT_DIR/etc/config.sh/setup\" \"$@\"\nelse\n    echo \"Error: did not locate installation path for $WM_PROJECT-$WM_PROJECT_VERSION\" 1&gt;&amp;2\n    echo \"No directory: $WM_PROJECT_DIR\" 1&gt;&amp;2\nfi\n\n# Cleanup variables (done as final statement for a clean exit code)\nunset foamOldDirs projectDir\n\n# Load system compilers, libraries, and tools\nmodule load gcc/11.2.0\nmodule load mvapich2/2.3.7\nmodule load scotch/7.0.7-i32\nmodule load metis/5.2.1.1\nmodule load cmake/3.24.2\n\n#------------------------------------------------------------------------------\n</code></pre>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#24-download-geometricvofext","title":"2.4 Download <code>geometricVofExt</code>","text":"<p>The <code>geometricVofExt</code> package is an unofficial extension to OpenFOAM for geometric Volume of Fluid (VOF) interface capturing. It provides a collection of utilities and solvers designed for accurate and conservative simulation of two-phase flows with sharp interface resolution on general unstructured meshes.</p> <p>Get <code>geometricVofExt</code> from an online reposity: <pre><code>source $WORK/OpenFOAM/OpenFOAM-v2312/etc/bashrc\n\n[ -d $WM_PROJECT_USER_DIR ] || mkdir $WM_PROJECT_USER_DIR\ncd $WM_PROJECT_USER_DIR\n\n[ -d modules ] || mkdir modules\ncd modules\n\ngit clone https://github.com/daidezhi/geometricVofExt.git\n</code></pre></p>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#3-build","title":"3. Build","text":"<p>Start an <code>idev</code> (Interactive DEVelopment) session before building</p> <ul> <li>Do NOT build OpenFOAM on the login nodes. These nodes have a strict process limit (maximum of 300), which is insufficient for compiling large-scale software.</li> <li>Use the <code>idev</code> utility to request an interactive session on a compute node. This provides the necessary resources for building and running MPI-based applications like OpenFOAM.</li> <li>To start an interactive session, run: <pre><code>idev -N 1 -n 16 -p vm-small -t 48:00:00\n</code></pre> This command allocates <code>16</code> cores in a compute node in the <code>vm-small</code> queue for <code>48</code> hours. <code>vm-small</code> is designed for users who only need a subset of a node's entire 128 cores in the <code>normal</code> queue.</li> </ul>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#31-compile-cgal-with-gmp-and-mpfr-using-system-gcc","title":"3.1 Compile <code>CGAL</code> with <code>GMP</code> and <code>MPFR</code> Using System GCC","text":"<p>The GNU Multiple Precision Arithmetic (<code>GMP</code>) and GNU Multiple Precision Floating-Point Reliably (<code>MPFR</code>) Libraries are highly recommended for use with CGAL. Otherwise, the <code>setVofField</code> and <code>setShapedFields</code> utilities will operate in a low-efficiency mode.</p> Library Note <code>GMP-6.2.1</code> <code>GMP</code>: GNU Multiple Precision Arithmetic Library <code>MPFR-4.1.0</code> <code>MPFR</code>: GNU Multiple Precision Floating-Point Reliably Library <code>MPC-1.2.1</code> <code>MPC</code>: GNU Multiple-Precision C Library <p>Build <code>CGAL-4.14.3</code> with the following commands:</p> <pre><code>source $WORK/OpenFOAM/OpenFOAM-v2312/etc/bashrc\n\ncd $WM_PROJECT_USER_DIR/modules/geometricVofExt\n\n./compileCGALWithGMPAndMPFRUsingSystemGCC\n</code></pre>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#32-build-ccmio-261","title":"3.2 Build <code>ccmio 2.6.1</code>","text":"<p><code>ccmio 2.6.1</code> is a C++ I/O library developed by CD-adapco (now part of Siemens) for reading and writing files in the CCM+ format used by STAR-CCM+. It provides an API to access mesh, solution data, and metadata from <code>*.ccm</code> files.</p> <pre><code>source $WORK/OpenFOAM/OpenFOAM-v2312/etc/bashrc\n\ncd $WM_THIRD_PARTY_DIR\n\n[ -f libccmio-2.6.1.tar.gz ] || wget -nv https://sourceforge.net/projects/foam-extend/files/ThirdParty/libccmio-2.6.1.tar.gz --no-check-certificate\n\n[ -d libccmio-2.6.1 ] || tar -xzf libccmio-2.6.1.tar.gz\n\n./makeCCMIO lib\n</code></pre>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#33-build-openfoam-v2312","title":"3.3 Build <code>OpenFOAM-v2312</code>","text":"<pre><code>source $WORK/OpenFOAM/OpenFOAM-v2312/etc/bashrc\n\ncd $WM_PROJECT_DIR\n\n./Allwmake -j16\n</code></pre>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#34-enable-initial-time-sampling-optional","title":"3.4 Enable Initial Time Sampling (optional)","text":"<pre><code>source $WORK/OpenFOAM/OpenFOAM-v2312/etc/bashrc\n\ncd $WM_PROJECT_USER_DIR/modules/geometricVofExt\n\n./enableInitialTimeWriting\n</code></pre>"},{"location":"tutorials/openfoam/hpc_build/ls6.html#35-build-geometricvofext","title":"3.5 Build <code>geometricVofExt</code>","text":"<pre><code>source $WORK/OpenFOAM/OpenFOAM-v2312/etc/bashrc\n\ncd $WM_PROJECT_USER_DIR/modules/geometricVofExt\n\n./Allwmake -j16\n\nmkdir -p $WM_PROJECT_USER_DIR/applications/utilities\n\n./compileWaves2FoamInOpenFOAM2312\n</code></pre>"}]}